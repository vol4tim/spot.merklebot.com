(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{1043:function(e,n,o){"use strict";o.d(n,"b",(function(){return r})),o.d(n,"a",(function(){return l}));var t=o(95),r=Object(t.c)("dashboardParameters",{state:function(){return{codeSampleParameter:!1}},actions:{setCodeSampleParameter:function(e){this.codeSampleParameter=e}}}),l=Object(t.c)("dAppParameters",{state:function(){return{payWithOption:"XRT",currentDrawingSegments:[]}}})},1795:function(e,n,o){"use strict";o.r(n);var t=o(94),r=o(1043),l=Object(t.b)({setup:function(){var e=Object(r.b)();return{value:Object(t.a)((function(){return e.codeSampleParameter?'# Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.\n\nimport argparse\nimport sys\nimport time\nimport bosdyn.client\nimport bosdyn.client.lease\nimport bosdyn.client.util\nimport bosdyn.geometry\n\nfrom bosdyn.client.robot_command import RobotCommandBuilder, RobotCommandClient, blocking_stand\n\n\ndef hello_spot(config):\n    sdk = bosdyn.client.create_standard_sdk(\'HelloSpotClient\')\n    robot = sdk.create_robot(config.hostname)\n    bosdyn.client.util.authenticate(robot)\n    robot.time_sync.wait_for_sync()\n    lease_client = robot.ensure_client(bosdyn.client.lease.LeaseClient.default_service_name)\n    with bosdyn.client.lease.LeaseKeepAlive(lease_client, must_acquire=True, return_at_exit=True):\n        robot.logger.info("Powering on robot... This may take several seconds.")\n        robot.power_on(timeout_sec=20)\n        assert robot.is_powered_on(), "Robot power on failed."\n        robot.logger.info("Robot powered on.")\n        robot.logger.info("Commanding robot to stand...")\n        command_client = robot.ensure_client(RobotCommandClient.default_service_name)\n        blocking_stand(command_client, timeout_sec=10)\n        robot.logger.info("Robot standing.")\n        time.sleep(3)\n        footprint_R_body = bosdyn.geometry.EulerZXY(yaw=0.4, roll=0.0, pitch=0.0)\n        cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body)\n        command_client.robot_command(cmd)\n        robot.logger.info("Robot standing twisted.")\n        time.sleep(3)\n        cmd = RobotCommandBuilder.synchro_stand_command(body_height=0.1)\n        command_client.robot_command(cmd)\n        robot.logger.info("Robot standing tall.")\n        time.sleep(3)\n        robot.power_off(cut_immediately=False, timeout_sec=20)\n        robot.logger.info("Robot safely powered off.")\n\n\ndef main(argv):\n    """Command line interface."""\n    parser = argparse.ArgumentParser()\n    bosdyn.client.util.add_base_arguments(parser)\n    options = parser.parse_args(argv)\n    hello_spot(options)\n\n\nif __name__ == \'__main__\':\n    if not main(sys.argv[1:]):\n        sys.exit(1)\n\n':"# Code sample will appear here"}))}}}),c=o(25),component=Object(c.a)(l,(function(){var e=this,n=e.$createElement;return(e._self._c||n)("CodeEditor",{staticClass:"my-4",attrs:{theme:"light",width:"auto",read_only:!0,languages:[["python","Python"]]},model:{value:e.value,callback:function(n){e.value=n},expression:"value"}})}),[],!1,null,null,null);n.default=component.exports}}]);